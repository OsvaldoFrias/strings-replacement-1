<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../../partials/head'); %>
    <!--
      <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
      <link href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" rel="stylesheet">
  -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>

    <script type="text/javascript" charset="utf8" src="/public/js/custom.date.js"></script>
    <link rel="stylesheet" type="text/css" href="/public/css/home.css">
</head>

<body onload="getBasicInfo()">
  <%- include("../../partials/topnav.ejs", { "location": "services" }) %>
    <%- include("./header.admin.ejs") %>
      <div class="container">
        <section>
          <div class="container py-4">
            <div class="row d-flex align-items-center justify-content-center">
              <div class="w-100">
                <div>
                  <form>
                    <div class="form-row">
                      <div class="form-group col-md-6">
                        <label for="name">Nombre</label>
                        <input type="text" class="form-control" id="name" name="name">
                      </div>
                      <div class="form-group col-md-6">
                        <label for="level">Nivel:</label>
                        <input type="text" class="form-control" id="level" name="level">
                      </div>
                    </div>
                    <div class="form-row">
                      <div class="form-group col-md-12">
                        <div id="infoTemplate">
                        </div>
                        <!-- <label for="businessName">Empresa:</label>
                    <input type="text" class="form-control" id="businessName" name="businessName"> -->
                      </div>
                    </div>
                    <div id="error" class="alert alert-danger alert-dismissible d-none">
                      <div id="error-message"></div>
                    </div>
                    <div class="form-group col-md-12 text-right">
                      <button type="button" class="btn btn-primary"
                        onclick="updateServiceCategory()">Actualizar</button>
                      <div id="error" class="alert alert-danger alert-dismissible d-none">
                        <div id="error-message"></div>
                      </div>
                    </div>
                  </form>
                </div>
                <div id="appointment"></div>
              </div>
            </div>
            <div>
              <%- include("../../partials/footer.ejs") %>
            </div>
          </div>
        </section>
      </div>
</body>
<script>
  const appointmentContainer = document.getElementById('appointment');

  function getBasicInfo() {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch('/api/v1/service-categories/<%= serviceCategoryId %>', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseServiceCategory(res))
      .catch(err => {
        console.error(err);
      });
  }

  function displayErrors(errors) {
    const error = document.getElementById('error');
    const errorMessage = document.getElementById('error-message');

    if (errors.length === 0) {
      error.classList.add('d-none');
      errorMessage.innerText = '';
      return;
    }

    error.classList.remove('d-none');
    errorMessage.innerText = errors.join('\n');
  }

  function validateFormFields() {
    const name = document.getElementById('name').value;
    const level = document.getElementById('level').value;
    const infoTemplate = $('#infoTemplate').summernote('code');

    const errors = [];

    if (!name) {
      errors.push("Se requiere el nombre del servicio.");
    }
    if (!level) {
      errors.push("Se requiere el nivel del servicio.");
    }
    if (!infoTemplate) {
      errors.push("Se requiere el nombre de la empresa a la que pertenece el usuario.");
    }

    displayErrors(errors);
    return errors.length == 0; // There are no errors
  }

  function updateServiceCategory(e) {
    if (e) {
      e.preventDefault();
    }

    if (!validateFormFields()) {
      return;
    }

    const name = document.getElementById('name').value;
    const level = document.getElementById('level').value;
    const infoTemplate = $('#infoTemplate').summernote('code');

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch('/api/v1/service-categories/<%= serviceCategoryId %>', {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        name,
        level,
        infoTemplate
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('Servicio actualizado.');
        } else {
          alert('Hubo un problema actualizando los datos del usuario, favor de intentar más tarde.');
        }
        window.location.href = "/service-categories";
      })
      .catch(err => {
        console.error(err);
      });
  }

  function parseServiceCategory(serviceCategory) {
    // console.log(serviceCategory);
    const serviceCategorySelect = document.getElementById('infoTemplate');

    serviceCategorySelect.innerHTML = serviceCategory.infoTemplate;
    $(document).ready(function () {
      $('#infoTemplate').summernote(); //.summernote('code')
    });

    const name = document.getElementById('name');
    name.value = serviceCategory.name;

    const level = document.getElementById('level');
    level.value = serviceCategory.level;

    // let appointmentsTable = $('#appointments-list').DataTable({
    //   "ordering": false,
    //   "sDom": 'lrtip',
    //   "dom": '<"top"i>rt<"bottom"p><"clear">'
    // });

    // const availableAppointmentId = available.id;
    // const meetingUrl = available.meetingUrl;
    // const appointmentStartDatetime = new Date(available.appointmentStartDatetime);
    // const appointmentFinishDatetime = new Date(available.appointmentFinishDatetime);
    // const month = months[appointmentStartDatetime.getMonth()];
    // const weekDay = weekDays[appointmentStartDatetime.getDay()];
    // const startDatetime = parseDateToJson(appointmentStartDatetime);
    // const finishDatetime = parseDateToJson(appointmentFinishDatetime);
    // const totalAppointments = available.totalAppointments;

    // const intervalDate = `${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.formatTime}`;

    // let trainerMail = null;
    // if (available.trainer) {
    //   trainerMail = available.trainer.email;
    // }

    // // const serviceDescription = available.service.serviceCategory.description;
    // const serviceName = available.service.name;
    // const serviceCategoryName = available.service.serviceCategory.name;
    // const serviceCategoryDescription = available.service.serviceCategory.description;
    // const serviceInfoTemplate = available.service.serviceCategory.infoTemplate;
    // const serviceAttendantsNumber = available.overrideAttendantsNumber || available.service.attendantsNumber;
    // const sessionType = available.sessionType === "remote" ? "Remoto" : "Presencial";
    // const state = available.state;
    // const country = available.state.country;
    // const location = available.sessionType === "remote" ? country.name : `${country.name} ${state.name}`;
    // const linkTitle = available.sessionType === "remote" ? "Entrar a conferencia" : "Dirección";

    // const cardTemplate = `<div class="card-1">
    //     <div class="d-flex flex-wrap justify-content-center">
    //       <div class="p-2">
    //         <div class="calendar-ico">
    //           <div>${month}</div>
    //           <div>${appointmentStartDatetime.getDate()}</div>
    //           <div>${weekDay}</div>
    //         </div>
    //       </div>
    //       <div class="p-2">
    //         <div class="cell-1">
    //           <div>${serviceName}</div>
    //           <div>${sessionType} - ${location}</div>
    //           <table>
    //             <tr>
    //               <td>Cita: </td>
    //               <td>${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.stringDate} ${finishDatetime.formatTime}</td>
    //             </tr>
    //           </table>
    //           ${meetingUrl ? `<a target="_blank" href="${meetingUrl}">${linkTitle} ${sessionType} - ${location}</a>` : '<p style="font-style: italic;color: #999999;">Aún no está disponible el enlace para unirse.</p>'}
    //         </div>
    //       </div>
    //       <div class="ml-auto p-2">
    //         <div class="cell-2">
    //           <div>${totalAppointments} de ${serviceAttendantsNumber} asistentes</div>
    //           ${trainerMail ? `<a href="mailto:${trainerMail}">${trainerMail}</a>` : '<span style="font-style: italic;color: #999999;">Aún no ha sido asignado un instructor.</span>'}
    //           <div><button class="btn btn-danger" onclick="cancelAvailableAppointment(${availableAppointmentId}, '${serviceCategoryName}', '${intervalDate}')">Cancelar</button></div>
    //         </div>
    //       </div>
    //     </div>
    //   </div>
    //   <div class="row">
    //     <div class="col-md-10 offset-md-1" style="text-align:justify;">${serviceInfoTemplate}</div>
    //   </div>`;

    // appointmentContainer.innerHTML = cardTemplate;


    // available.appointments.forEach(appointment => {
    //   const {
    //     hash,
    //     attendant: {
    //       id,
    //       firstName,
    //       lastName,
    //       businessName,
    //       hru,
    //       licenseKey,
    //       user: {
    //         email
    //       }
    //     }
    //   } = appointment;
    //   const fullName = `${firstName} ${lastName}`;

    //   appointmentsTable
    //     .row
    //     .add([
    //       `<div><a href="/attendant/${id}">${fullName}</a></div>`,
    //       `<a href="mailto:${email}">${email}</a>`,
    //       `${businessName}`,
    //       hru,
    //       `<img style="cursor:pointer;" onclick="setLicenseKeyUrl(${id}, '${fullName}')" src="/public/img/edit.png" alt="Editar enlace de la licencia" width="15px"/> ${(licenseKey ? `<a target="_blank" href="${licenseKey}">Licencia</a>` : '<span style="font-style: italic;color: #999999;">No ha colocado una licencia.</span>')}`,
    //       `<img style="cursor:pointer;" onclick="cancelAppointment('${hash}', '${serviceCategoryName}', '${intervalDate}')" src="/public/img/cancel-book.png" alt="Cancelar" width="30px"/>`,
    //     ])
    //     .draw()
    //     .node();
    // });
  }

  function setLicenseKeyUrl(attendantId, fullAttendantName) {
    let licenseKey = prompt(`Enlace para licencia de ${fullAttendantName}`);
    if (!licenseKey) {
      return;
    }

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch(`/api/v1/attendants/${attendantId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        licenseKey
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('Enlace actualizado.');
        } else {
          alert('Hubo un problema actualizando el enlace de la licencia, favor de intentar más tarde.');
        }
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      });
  }

  function cancelAvailableAppointment(availableAppointmentId, serviceCategoryName, intervalDate) {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');
    if (!confirm(
      `¿Desea cancelar la sesión de ${serviceCategoryName} para el ${intervalDate}?`
    )) {
      return;
    }

    fetch(`/api/v1/available-appointments/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'delete'
    })
      .then(res => res.json())
      .then(res => {
        // console.log(res);
        if (res.statusCode) {
          if (res.statusCode !== 200) {
            alert(res.message);
          }
        }
        window.location = '/home';
      })
      .catch(err => {
        console.error(err);
      });
  }

  function cancelAppointment(hash, serviceCategoryName, intervalDate) {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');
    if (!confirm(
      `¿Desea cancelar la sesión de ${serviceCategoryName} para el ${intervalDate}?`
    )) {
      return;
    }

    fetch(`/api/v1/appointments/${hash}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'delete'
    })
      .then(res => res.json())
      .then(res => {
        // console.log(res);
        if (res.statusCode) {
          if (res.statusCode !== 200) {
            alert(res.message);
          }
        }
        window.location = '/home';
      })
      .catch(err => {
        console.error(err);
      });
  }
</script>

</html>
