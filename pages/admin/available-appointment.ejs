<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../../partials/head'); %>
  <!-- Data table -->
  <link rel="stylesheet" type="text/css"
    href="/public/css/jquery.dataTables.css">
  <script type="text/javascript" charset="utf8"
    src="/public/js/jquery.dataTables.js">
    </script>
  <!--/ Data table -->
  <script type="text/javascript" charset="utf8"
    src="/public/js/custom.date.js"></script>
  <link rel="stylesheet" type="text/css" href="/public/css/home.css">
</head>

<body onload="getBasicInfo()">
  <%- include("../../partials/topnav.ejs", { "location": "home" }) %>
  <%- include("./header.admin.ejs") %>
  <div class="container">
    <section>
      <div class="container py-4">
        <div
          class="row d-flex align-items-center justify-content-center">
          <div class="w-100">
            <div>
              <table id="appointments-list">
                <thead>
                  <th>
                    <%= translation.HOME.ASSISTANT %>
                  </th>
                  <th>
                    <%= translation.HOME.MAIL %>
                  </th>
                  <th>
                    <%= translation.CERTIFICATES.THEAD_5 %>
                  </th>
                  <th>
                    <%= translation.AVAILABLE_APPOINTMENT.HRU %>
                  </th>
                  <th>
                    <%= translation.AVAILABLE_APPOINTMENT.LICENSE %>
                  </th>
                  <th>
                    <%= translation.HOME.CANCEL %>
                  </th>
                </thead>
              </table>
            </div>
            <div id="appointment"></div>
          </div>
        </div>
        <div>
          <%- include("../../partials/footer.ejs") %>
        </div>
      </div>
    </section>
  </div>
  <dialog id="directionDialog" style="width: 50%;">
    <section class="text-center">
      <%= translation.AVAILABLE_APPOINTMENT.UPDATE_DIRECTION %>
    </section>
    <!-- <input type="text" class="text-center" style="width: 100%;"> -->
    <section class="text-center">
      <textarea name="direction" id="direction" style="width: 100%;"
        rows="10"></textarea>
    </section>
    <section class="text-center">
      <button id="cancelDirectionButton">
        <%= translation.HOME.CANCEL %>
      </button>
      <button id="submitDirectionButton">
        <%= translation.AVAILABLE_APPOINTMENT.SUBMIT_DIRECTION %>
      </button>
    </section>
  </dialog>
</body>
<script>
  const appointmentContainer = document.getElementById('appointment');
  var directionDialog = document.getElementById('directionDialog');
  var cancelDirectionButton = document.getElementById('cancelDirectionButton');
  var submitDirectionButton = document.getElementById('submitDirectionButton');

  function getBasicInfo() {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch('/api/v1/available-appointments/<%= id %>', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      // .then(res => console.log(res))
      .then(res => parseAvailableAppointment(res))
      .catch(err => {
        console.error(err);
      });
  }

  function parseAvailableAppointment(available) {
    // console.log(available);

    let appointmentsTable = $('#appointments-list').DataTable({
      "ordering": false,
      "sDom": 'lrtip',
      "dom": '<"top"if>rt<"bottom"p><"clear">'
    });

    const availableAppointmentId = available.id;
    const meetingUrl = available.meetingUrl;
    const appointmentStartDatetime = new Date(available.appointmentStartDatetime);
    const appointmentFinishDatetime = new Date(available.appointmentFinishDatetime);
    const month = months[appointmentStartDatetime.getMonth()];
    const weekDay = weekDays[appointmentStartDatetime.getDay()];
    const startDatetime = parseDateToJson(appointmentStartDatetime);
    const finishDatetime = parseDateToJson(appointmentFinishDatetime);
    const totalAppointments = available.totalAppointments;

    const intervalDate = `${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.formatTime}`;

    // let trainerMail = null;
    // if (available.trainer) {
    //   trainerMail = available.trainer.email;
    // }

    let trainersMail = '';
    if (available.trainers && available.trainers.length !== 0) {
      let acc = '';
      trainersMail += available.trainers.reduce((previousValue, trainer) => {
        return previousValue + `<a href="mailto:${trainer.email}">${trainer.email}</a><br/>`;
      }, acc);
      // console.log(trainersMail);
    } else {
      // trainersMail = `${trainerMail ? `<a href="mailto:${trainerMail}">${trainerMail}</a>` : '<span style="font-style: italic;color: #999999;">AÃºn no ha sido asignado un instructor.</span>'}`;
    }

    // const serviceDescription = available.service.serviceCategory.description;
    const serviceName = available.service.name;
    const serviceType = available.service.type;
    const serviceCategoryName = available.service.serviceCategory.name;
    const serviceCategoryDescription = available.service.serviceCategory.description;
    const serviceInfoTemplate = available.service.serviceCategory.infoTemplate;
    const serviceAttendantsNumber = available.overrideAttendantsNumber || available.service.attendantsNumber;
    const sessionType = available.sessionType === "remote" ?
      "<%= translation.HOME.REMOTE %>"
      : "<%= translation.HOME.PRESENTIAL %>";
    const state = available.state;
    const country = available.state.country;
    const location = serviceType === 'exam' ?
      ''
      : available.sessionType === "remote" ?
        country.name
        : `${country.name} ${state.name}`;
    const linkTitle = available.sessionType === "remote" ?
      "<%= translation.HOME.ENTER_CONFERENCE %>"
      : "<%= translation.HOME.DIRECTION %>";
    const directionType = available.sessionType === "remote" ?
      "<%= translation.AVAILABLE_APPOINTMENT.INDICATIONS %>"
      : "<%= translation.HOME.DIRECTION %>";
    const direction = available.direction;

    const cardTemplate = `<div class="card-1">
        <div class="d-flex flex-wrap justify-content-center">
          <div class="p-2">
            <div class="calendar-ico">
              <div>${month}</div>
              <div>${appointmentStartDatetime.getDate()}</div>
              <div>${weekDay}</div>
            </div>
          </div>
          <div class="p-2">
            <div class="cell-1">
              <div>${serviceName}</div>
              <div>${sessionType}${location ? " - " + location : ''}</div>
              <table>
                <tr>
                  <td><%= translation.HOME.DATE %> </td>
                  <td>${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.stringDate} ${finishDatetime.formatTime}</td>
                </tr>
              </table>
              <img style="cursor:pointer;" onclick="updateMeetingUrl(${availableAppointmentId})" src="/public/img/edit.png" alt="<%= translation.AVAILABLE_APPOINTMENT.EDIT_LINK %>" width="15px"/>
              ${meetingUrl ? `<a target="_blank" href="${meetingUrl}">${linkTitle} ${sessionType}${location ? " - " + location : ''}</a>` : '<p style="font-style: italic;color: #999999;"><%= translation.HOME.LINK_NOT_AVAILABLE %></p>'}
              <p><img style="cursor:pointer;" onclick="showModalDirection(${availableAppointmentId})" src="/public/img/edit.png" alt="<%= translation.AVAILABLE_APPOINTMENT.EDIT_DIRECTION %>" width="15px"/> ${directionType}:</p>
              <p>${direction ? direction.replace(/\n/gi, '<br>') : '-'}</p>
            </div>
          </div>
          <div class="ml-auto p-2">
            <div class="cell-2">
              <div><img style="cursor:pointer;" onclick="updateOverrideAttendantsNumber(${availableAppointmentId})" src="/public/img/edit.png" alt="<%= translation.AVAILABLE_APPOINTMENT.LABEL_13 %>" width="15px"/> ${totalAppointments} <%= translation.AVAILABLE_APPOINTMENT.OF %> ${serviceAttendantsNumber} <%= translation.AVAILABLE_APPOINTMENT.ASSISTANTS %></div>
              ${trainersMail}
              <div><button class="btn btn-danger" onclick="cancelAvailableAppointment(${availableAppointmentId}, '${serviceCategoryName}', '${intervalDate}')"><%= translation.ADMIN_AVAILABLE_APPOINTMEN.CANCEL_COURSE %></button></div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-10 offset-md-1" style="text-align:justify;">${serviceInfoTemplate}</div>
      </div>`;

    appointmentContainer.innerHTML = cardTemplate;


    available.appointments.forEach(appointment => {
      const {
        hash,
        attendant: {
          id,
          firstName,
          lastName,
          businessName,
          hru,
          licenseKey,
          user: {
            email
          }
        }
      } = appointment;
      const fullName = `${firstName} ${lastName}`;

      appointmentsTable
        .row
        .add([
          `<div><a href="/attendant/${id}">${fullName}</a></div>`,
          `<a href="mailto:${email}">${email}</a>`,
          `${businessName}`,
          hru,
          `<img style="cursor:pointer;" onclick="setLicenseKeyUrl(${id}, '${fullName}')" src="/public/img/edit.png" alt="<%= translation.AVAILABLE_APPOINTMENT.LABEL_2 %>" width="15px"/> ${(licenseKey ? `<a target="_blank" href="${licenseKey}"><%= translation.AVAILABLE_APPOINTMENT.LICENSE %></a>` : '<span style="font-style: italic;color: #999999;"><%= translation.ADMIN_AVAILABLE_APPOINTMEN.LABEL_3 %></span>')}`,
          `<img style="cursor:pointer;" onclick="cancelAppointment('${hash}', '${serviceCategoryName}', '${intervalDate}')" src="/public/img/cancel-book.png" alt="<%= translation.HOME.CANCEL %>" width="30px"/>`,
        ])
        .draw()
        .node();
    });
  }

  function updateOverrideAttendantsNumber(availableAppointmentId) {
    let overrideAttendantsNumber = prompt(`<%= translation.AVAILABLE_APPOINTMENT.LABEL_14 %>`);
    if (!overrideAttendantsNumber) {
      return;
    }

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch(`/api/v1/available-appointments/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        overrideAttendantsNumber
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('<%= translation.AVAILABLE_APPOINTMENT.LABEL_15 %>');
        } else {
          alert('<%= translation.ADMIN_AVAILABLE_APPOINTMEN.LABEL_16 %>');
        }
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      });
  }

  let curriedUpdateDirection;

  function updateDirection(availableAppointmentId) {
    let direction = document.getElementById('direction').value;
    if (!direction) {
      return;
    }

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch(`/api/v1/available-appointments/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        direction
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('<%= translation.ADMIN_AVAILABLE_APPOINTMEN.LABEL_17 %>');
          return fetch(`/api/v1/notification/update/available-appointment/${availableAppointmentId}`, {
            headers: myHeaders,
            credentials: "same-origin",
            method: 'POST',
            body: JSON.stringify({
              direction
            })
          })
        } else {
          alert('<%= translation.ADMIN_AVAILABLE_APPOINTMEN.LABEL_18 %>');
          location.reload(true);
        }
        // location.reload(true);
      })
      .then(updateNotification => {
        alert('Notificaciones enviadas.');
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      });
  }

  function showModalDirection(availableAppointmentId) {
    directionDialog.showModal();
    curriedUpdateDirection = function () {
      updateDirection(availableAppointmentId);
    }
  }

  cancelDirectionButton.addEventListener('click', function () {
    directionDialog.close();
  });

  submitDirectionButton.addEventListener('click', function () {
    directionDialog.close();
    curriedUpdateDirection();
  });

  function updateMeetingUrl(availableAppointmentId) {
    let meetingUrl = prompt(`<%= translation.AVAILABLE_APPOINTMENT.LABEL_19 %>`);
    if (!meetingUrl) {
      return;
    }

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch(`/api/v1/available-appointments/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        meetingUrl
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('<%= translation.HOME.LABEL_22 %>');
        } else {
          alert('<%= translation.AVAILABLE_APPOINTMENT.LABEL_21 %>');
        }
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      });
  }

  function setLicenseKeyUrl(attendantId, fullAttendantName) {
    let licenseKey = prompt(`<%= translation.AVAILABLE_APPOINTMENT.LABEL_22 %> ${fullAttendantName}`);
    if (!licenseKey) {
      return;
    }

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch(`/api/v1/attendants/${attendantId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        licenseKey
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('<%= translation.HOME.LABEL_22 %>');
        } else {
          alert('<%= translation.AVAILABLE_APPOINTMENT.LABEL_6 %>');
        }
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      });
  }

  function cancelAvailableAppointment(availableAppointmentId, serviceCategoryName, intervalDate) {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');
    if (!confirm(
      `<%= translation.AVAILABLE_APPOINTMENT.LABEL_24 %> ${serviceCategoryName} <%= translation.AVAILABLE_APPOINTMENT.LABEL_25 %> ${intervalDate}?`
    )) {
      return;
    }

    fetch(`/api/v1/available-appointments/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'delete'
    })
      .then(res => res.json())
      .then(res => {
        // console.log(res);
        if (res.statusCode) {
          if (res.statusCode !== 200) {
            alert(res.message);
          }
        }
        window.location = '/home';
      })
      .catch(err => {
        console.error(err);
      });
  }

  function cancelAppointment(hash, serviceCategoryName, intervalDate) {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');
    if (!confirm(
      `<%= translation.AVAILABLE_APPOINTMENT.LABEL_24 %> ${serviceCategoryName} <%= translation.AVAILABLE_APPOINTMENT.LABEL_25 %> ${intervalDate}?`
    )) {
      return;
    }

    fetch(`/api/v1/appointments/${hash}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'delete'
    })
      .then(res => res.json())
      .then(res => {
        // console.log(res);
        if (res.statusCode) {
          if (res.statusCode !== 200) {
            alert(res.message);
          }
        }
        window.location = '/home';
      })
      .catch(err => {
        console.error(err);
      });
  }
</script>

</html>