<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../../partials/head'); %>

  <!-- Data table -->
  <link rel="stylesheet" type="text/css"
    href="/public/css/jquery.dataTables.css">
  <link rel="stylesheet" type="text/css"
    href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.dataTables.min.css">
  <script type="text/javascript" charset="utf8"
    src="/public/js/jquery.dataTables.js">
    </script>
  <script type="text/javascript" charset="utf8"
    src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js">
    </script>
  <!--/ Data table -->
  <script type="text/javascript" charset="utf8"
    src="/public/js/custom.date.js"></script>
  <link rel="stylesheet" type="text/css" href="/public/css/home.css">
</head>

<body onload="getBasicInfo()">
  <%- include("../../partials/topnav.ejs", { "location": "home" }) %>
  <%- include("./header.trainer.ejs") %>
  <div class="container">
    <section>
      <div class="container py-4">
        <div
          class="row d-flex align-items-center justify-content-center">
          <div class="w-100">
            <div id="loading"></div>
            <h2><%= translation.TRAINER_HOME.UPCOMING_SESSIONS %></h2>
            <div id="appointments">
              <form>
                <div class="form-row">
                  <div class="form-group col-md-6">
                    <label for="trainerId">
                      <%= translation.TRAINER_HOME.TRAINER %>
                    </label>
                    <select id="trainerId" name="trainerId"
                      class="form-control">
                      <option value="" selected>
                        <%= translation.TRAINER_HOME.OPTION %>
                      </option>
                    </select>
                  </div>
                  <div class="col-md-6 align-bottom">
                    <button type="button" class="btn btn-primary"
                      onclick="filterAppointmentList()">
                      <%= translation.TRAINER_HOME.FILTER %>
                    </button>
                  </div>
                </div>
                <div id="error"
                  class="alert alert-danger alert-dismissible d-none">
                  <div id="error-message"></div>
                </div>
                <div id="loading"></div>
              </form>
            </div>
            <div id="availableAppointments">
              <table id="availableAppointments-list" class="compact"
                style="width:100%">
                <thead>
                  <tr>
                    <th><%= translation.TRAINER_HOME.SESSION %></th>
                    <th><%= translation.TRAINER_HOME.DATE_HOUR %></th>
                    <th><%= translation.TRAINER_HOME.LINK %></th>
                    <th><%= translation.TRAINER_HOME.TRAINER_1 %></th>
                    <th><%= translation.TRAINER_HOME.RESERVATIONS %>
                    </th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>
        <div>
          <%- include("../../partials/footer.ejs") %>
        </div>
      </div>
    </section>
  </div>
</body>
<script type="text/javascript" charset="utf8"
  src="/public/js/custom.home.js"></script>
<script>
  function getBasicInfo() {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch('/api/v1/users/trainers', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseTrainers(res))
      .catch(err => {
        console.error(err);
      });

    fetch('/api/v1/profile/available-appointments', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseAvailableAppointments(res))
      .catch(err => {
        console.error(err);
      });
  }

  function parseTrainers(trainers) {
    const select = document.getElementById('trainerId');
    trainers.forEach(trainer => {
      const option = document.createElement('option');
      // console.log(trainer);
      option.value = trainer.id;
      option.innerText = trainer.email;

      select.appendChild(option);
    });
  }

  function getSelectValue(select) {
    return select.options[select.selectedIndex].value;
  }

  function getSelectText(select) {
    return select.options[select.selectedIndex].text;
  }

  function filterAppointmentList() {
    displayLoading();

    const div = document.getElementById('availableAppointments');
    div.innerHTML = `<table id="availableAppointments-list" class="compact" style="width:100%">
      <thead>
        <tr>
          <th><%= translation.TRAINER_HOME.SESSION %></th>
          <th><%= translation.TRAINER_HOME.DATE_HOUR %></th>
          <th><%= translation.TRAINER_HOME.LINK %></th>
          <th><%= translation.TRAINER_HOME.TRAINER_1 %></th>
          <th><%= translation.TRAINER_HOME.RESERVATIONS %></th>
        </tr>
      </thead>
    </table>`;

    let email = getSelectText(document.getElementById("trainerId"));
    const emailValue = getSelectValue(document.getElementById("trainerId"));

    if (!emailValue) {
      email = '';
    }

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');
    fetch('/api/v1/profile/available-appointments?email=' + email, {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseAvailableAppointments(res))
      .catch(err => {
        console.error(err);
      })
      .finally(() => {
        hideLoading();
      });
  }

  function fixAppointment(availableAppointmentId) {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch(`/api/v1/profile/fix-appointment/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'post'
    })
      .then(res => {
        if (res.status === 201) {
          alert('<%= translation.TRAINER_HOME.LABEL_1 %>');
        } else {
          alert('<%= translation.TRAINER_HOME.LABEL_2 %>');
        }
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      });
  }

  function parseAvailableAppointments(res) {
    let availableAppointmentsTable = $('#availableAppointments-list').DataTable({
      "responsive": true,
      "ordering": false,
      "pageLength": 20,
      "sDom": 'lrtip',
      "dom": '<"top"if>rt<"bottom"p><"clear">'
    });
    res.forEach(availableAppointment => {
      const availableAppointmentId = availableAppointment.id;
      const totalAppointments = availableAppointment.totalAppointments;
      const meetingUrl = availableAppointment.meetingUrl;
      const appointmentStartDatetime = new Date(availableAppointment.appointmentStartDatetime);
      const appointmentFinishDatetime = new Date(availableAppointment.appointmentFinishDatetime);
      const month = months[appointmentStartDatetime.getMonth()];
      const weekDay = weekDays[appointmentStartDatetime.getDay()];
      const startDatetime = parseDateToJson(appointmentStartDatetime);
      const finishDatetime = parseDateToJson(appointmentFinishDatetime);

      const intervalDate = `${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.formatTime}`;

      // let trainerMail = null;
      // if (availableAppointment.trainer) {
      //   trainerMail = availableAppointment.trainer.email;
      // }

      let trainersMail = '';
      if (availableAppointment.trainers && availableAppointment.trainers.length !== 0) {
        let acc = '';
        trainersMail += availableAppointment.trainers.reduce((previousValue, trainer) => {
          return previousValue + `<a href="mailto:${trainer.email}">${trainer.email}</a><br/>`;
        }, acc);
        // console.log(trainersMail);
      }

      const serviceName = availableAppointment.service.name;
      const serviceType = availableAppointment.service.type;
      const serviceAttendantsNumber = availableAppointment.overrideAttendantsNumber || availableAppointment.service
        .attendantsNumber;
      const serviceCategoryName = availableAppointment.service.serviceCategory.name;
      const serviceCategoryDescription = availableAppointment.service.serviceCategory.description;
      const sessionType = availableAppointment.sessionType === "remote" ? "<%= translation.TRAINER_HOME.REMOTE %>" : "<%= translation.TRAINER_HOME.PRESENTIAL %>";
      const state = availableAppointment.state;
      const country = availableAppointment.state.country;
      const location = serviceType === 'exam' ? '' : availableAppointment.sessionType === "remote" ? country.name : `${country.name} ${state.name}`;
      const linkTitle = availableAppointment.sessionType === "remote" ? "<%= translation.TRAINER_HOME.ENTER_CONFERENCE %>" : "<%= translation.TRAINER_HOME.DIRECTION %>";

      availableAppointmentsTable
        .row
        .add([
          `<div><a href="/available-appointment/${availableAppointmentId}">${serviceName} - ${sessionType}${location ? " - " + location : ''}</a></div>`,
          `${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.stringDate} ${finishDatetime.formatTime}`,
          `${(meetingUrl ? `<a target="_blank" href="${meetingUrl}">${linkTitle}</a>` : '<span style="font-style: italic;color: #999999;"><%= translation.TRAINER_HOME.LABEL_3 %></span>')}`,
          // `${trainerMail ? `<a href="mailto:${trainerMail}">${trainerMail}</a>` : '<span style="font-style: italic;color: #999999;">AÃºn no ha sido asignado un instructor.</span>'}<div id="availableAppointmentId-${availableAppointmentId}"></div>`,
          trainersMail,
          `${totalAppointments} de ${serviceAttendantsNumber}`,
        ])
        .draw()
        .node();
    });
  }

  function fillDiv(res, htmlDivId) {
    const container = document.getElementById(htmlDivId);
    const select = document.createElement('select');
    res.forEach(trainer => {
      const option = document.createElement('option');
      option.value = trainer.id;
      option.innerText = trainer.email;

      select.appendChild(option);
    });

    if (res) {
      if (res.length > 0) {
        container.appendChild(select);

        const cancelBtn = document.createElement('button');
        cancelBtn.innerText = "<%= translation.TRAINER_HOME.CANCEL %>";
        cancelBtn.onclick = (e) => {
          const availableAppointmentId = htmlDivId.replace('availableAppointmentId-', '');
          const trainerEdit = document.getElementById(`trainerEdit-${availableAppointmentId}`);
          trainerEdit.classList.remove('d-none');
          container.innerHTML = '';
        };
        cancelBtn.classList.add('btn', 'btn-danger');
        container.appendChild(cancelBtn);

        const button = document.createElement('button');
        button.innerText = "<%= translation.TRAINER_HOME.SAVE %>";
        button.onclick = (e) => {
          const trainerId = select.options[select.selectedIndex].value;
          const availableAppointmentId = container.id.replace('availableAppointmentId-', '');
          container.innerHTML = '';
          setAppointmentTrainer(trainerId, availableAppointmentId);
        };
        button.classList.add('btn', 'btn-success');
        container.appendChild(button);
      }
    }
  }

  function setAppointmentTrainer(trainerId, availableAppointmentId) {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');
    fetch(`/api/v1/profile/available-appointments/${availableAppointmentId}`, {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'post',
      body: JSON.stringify({
        trainerId
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('<%= translation.TRAINER_HOME.LABEL_4 %>');
        } else {
          alert('<%= translation.TRAINER_HOME.LABEL_5 %>');
        }
        location.reload(true);
      })
      .catch(err => {
        console.error(err);
      })
      .finally(() => {
        const trainerEdit = document.getElementById(`trainerEdit-${availableAppointmentId}`);
        trainerEdit.classList.remove('d-none');
      });
  }
</script>

</html>