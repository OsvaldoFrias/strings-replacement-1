<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../../partials/head'); %>
  <!-- Data table -->
  <link rel="stylesheet" type="text/css" href="/public/css/jquery.dataTables.css">
  <script type="text/javascript" charset="utf8" src="/public/js/jquery.dataTables.js">
  </script>
  <!--/ Data table -->
  <script type="text/javascript" charset="utf8" src="/public/js/custom.date.js"></script>
  <link rel="stylesheet" type="text/css" href="/public/css/home.css">
</head>

<body onload="getBasicInfo()">
  <%- include("../../partials/topnav.ejs", { "location": "attendants" }) %>
  <%- include("./header.trainer.ejs") %>
  <div class="container">
    <section>
      <div class="container py-4">
        <div class="row d-flex align-items-center justify-content-center">
          <div class="w-100">
            <h2><%= translation.RSM_ATTENDANT_PROFILE.USER_PROFILE %></h2>
            <form>
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="email"><%= translation.RSM_ATTENDANT_PROFILE.EMAIL_PROFILE_1 %></label>
                  <br>
                  <label id="email"><%= translation.RSM_ATTENDANT_PROFILE.EMAIL_PROFILE_2 %></label>
                </div>
                <div class="form-group col-md-6">
                  <label for="country"><%= translation.RSM_ATTENDANT_PROFILE.COUNTRY_PROFILE_1 %></label>
                  <br>
                  <label id="country"><%= translation.RSM_ATTENDANT_PROFILE.COUNTRY_PROFILE_2 %></label>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="firstName"><%= translation.RSM_ATTENDANT_PROFILE.FIRST_NAME %></label>
                  <br>
                  <label id="firstName"></label>
                </div>
                <div class="form-group col-md-6">
                  <label for="lastName"><%= translation.RSM_ATTENDANT_PROFILE.LAST_NAME %></label>
                  <br>
                  <label id="lastName"></label>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group col-md-12">
                  <label for="businessName"><%= translation.RSM_ATTENDANT_PROFILE.BUSINESS_NAME %></label>
                  <br>
                  <label id="businessName"></label>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="rsmName"><%= translation.RSM_ATTENDANT_PROFILE.RSM_NAME %></label>
                  <select id="rsmName" name="rsmName" class="form-control">
                    <option value="" selected><%= translation.RSM_ATTENDANT_PROFILE.OPTION %></option>
                  </select>
                </div>
              </div>
              <div id="error" class="alert alert-danger alert-dismissible d-none">
                <div id="error-message"></div>
              </div>
              <div class="form-group col-md-12 text-right">
                <button type="button" class="btn btn-primary" onclick="updateAttendant()"><%= translation.RSM_ATTENDANT_PROFILE.UPDATE %></button>
              </div>
              <div class="form-row">
                <div class="form-group col-md-12">
                  <h3><%= translation.RSM_ATTENDANT_PROFILE.NEXT_ASSISTANCES %></h3>
                  <div id="appointments"></div>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group col-md-12">
                  <h3><%= translation.RSM_ATTENDANT_PROFILE.BROWSING_HISTORY %></h3>
                  <table id="grades-list"></table>
                </div>
              </div>
            </form>
          </div>
        </div>
        <div>
          <%- include("../../partials/footer.ejs") %>
        </div>
      </div>
    </section>
  </div>
</body>
<script>
  const appointmentContainer = document.getElementById('appointment');

  function getBasicInfo() {
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch('/api/v1/system-user-data?roles=rsm', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseSystemUserData('rsmName', res, null))
      .then(res => fetch('/api/v1/attendants/<%= attendantId %>', {
        headers: myHeaders,
        credentials: "same-origin"
      }))
      .then(res => res.json())
      .then(res => parseAttendant(res))
      .catch(err => {
        console.error(err);
      });

    fetch('/api/v1/grades/attendant/<%= attendantId %>', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseGrades(res))
      .catch(err => {
        console.error(err);
      });

    fetch('/api/v1/appointments/attendant/<%= attendantId %>', {
      headers: myHeaders,
      credentials: "same-origin"
    })
      .then(res => res.json())
      .then(res => parseAppointments(res))
      .catch(err => {
        console.error(err);
      });
  }

  function parseSystemUserData(selectId, array, onchange = null, selectedId = 0) {
    // console.log(array);
    const select = document.getElementById(selectId);
    array.forEach(item => {
      const option = document.createElement('option');
      option.value = item.user.id;
      option.innerText = `${item.firstName} ${item.lastName}`;

      if (item.user.id === selectedId) {
        option.selected = true;
      }
      select.appendChild(option);
    });

    if (array) {
      if (array.length > 0) {
        if (onchange) {
          select.onchange = (e) => {
            onchange(select);
          };
        }
      }
    }
  }

  function parseAppointments(res) {
    const appointmentsTemplate = res.map(appointment => {
      const appointmentHash = appointment.hash;
      const availableId = appointment.available.id;
      const meetingUrl = appointment.available.meetingUrl;
      const appointmentStartDatetime = new Date(appointment.available.appointmentStartDatetime);
      const appointmentFinishDatetime = new Date(appointment.available.appointmentFinishDatetime);
      const month = months[appointmentStartDatetime.getMonth()];
      const weekDay = weekDays[appointmentStartDatetime.getDay()];
      const startDatetime = parseDateToJson(appointmentStartDatetime);
      const finishDatetime = parseDateToJson(appointmentFinishDatetime);

      const serviceName = appointment.available.service.name;
      const serviceCategoryName = appointment.available.service.serviceCategory.name;
      const serviceCategoryDescription = appointment.available.service.serviceCategory.description;
      const sessionType = appointment.available.sessionType === "remote" ? "<%= translation.RSM_ATTENDANT_PROFILE.REMOTE %>" : "<%= translation.RSM_ATTENDANT_PROFILE.PRESENTIAL %>";
      const state = appointment.available.state;
      const country = appointment.available.state.country;
      const location = appointment.available.sessionType === "remote" ? country.name : `${country.name} ${state.name}`;
      const linkTitle = appointment.available.sessionType === "remote" ? "<%= translation.RSM_ATTENDANT_PROFILE.ENTER_CONFERENCE %>" : "<%= translation.RSM_ATTENDANT_PROFILE.DIRECTION %>";

      const cardTemplate = `<div class="card-1">
      <div class="d-flex flex-wrap justify-content-center">
        <div class="p-2">
          <div class="calendar-ico">
            <div>${month}</div>
            <div>${appointmentStartDatetime.getDate()}</div>
            <div>${weekDay}</div>
          </div>
        </div>
        <div class="p-2">
          <div class="cell-1">
            <div><a href="/available-appointment/${availableId}">${serviceName}</a></div>
            <div>${sessionType} - ${location}</div>
            <table>
              <tr>
                <td><%= translation.RSM_ATTENDANT_PROFILE.DATE %> </td>
                <td>${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.stringDate} ${finishDatetime.formatTime}</td>
              </tr>
            </table>
          </div>
        </div>
        <div class="ml-auto p-2">
          <div class="cell-2">
            ${meetingUrl ? `<a target="_blank" class="btn btn-info" href="${meetingUrl}">${linkTitle}</a>` : '<p style="font-style: italic;color: #999999;"><%= translation.RSM_ATTENDANT_PROFILE.LABEL_1 %></p>'}
          </div>
        </div>
      </div>
    </div>`;
      return cardTemplate;
    });

    if (appointmentsTemplate && appointmentsTemplate.length > 0) {
      appointments.innerHTML = appointmentsTemplate.join('\n');
    } else {
      appointments.innerHTML = '<p><%= translation.RSM_ATTENDANT_PROFILE.LABEL_2 %></p>'
    }

  }

  function parseGrades(grades, type) {
    const gradesList = document.getElementById('grades-list');
    gradesList.innerHTML = `<thead><tr><th><%= translation.RSM_ATTENDANT_PROFILE.SESSION %></th><th><%= translation.RSM_ATTENDANT_PROFILE.DAY %></th><th><%= translation.RSM_ATTENDANT_PROFILE.NAME %></th><th><%= translation.RSM_ATTENDANT_PROFILE.EMAIL %></th><th><%= translation.RSM_ATTENDANT_PROFILE.COMPANY %></th><th><%= translation.RSM_ATTENDANT_PROFILE.RESULT %></th></tr></thead>`;

    let gradesTable = $('#grades-list').DataTable({
      "ordering": false,
      "pageLength": 20,
      "sDom": 'lrtip',
      "dom": '<"top"i>rt<"bottom"p><"clear">'
    });

    grades.forEach(appointment => {
      const appointmentId = appointment.id;
      const appointmentStartDatetime = new Date(appointment.available.appointmentStartDatetime);
      const appointmentFinishDatetime = new Date(appointment.available.appointmentFinishDatetime);
      const month = months[appointmentStartDatetime.getMonth()];
      const weekDay = weekDays[appointmentStartDatetime.getDay()];
      const startDatetime = parseDateToJson(appointmentStartDatetime);
      const finishDatetime = parseDateToJson(appointmentFinishDatetime);

      let trainerMail = null;
      if (appointment.available.trainer) {
        trainerMail = appointment.available.trainer.email;
      }

      const serviceName = appointment.available.service.name;
      const serviceCategoryName = appointment.available.service.serviceCategory.name;
      const serviceCategoryDescription = appointment.available.service.serviceCategory.description;

      let grade = null;
      let gradeId = null;
      let certificateUrl = null;
      let feedbackUrl = null;
      if (appointment.grade) {
        gradeId = appointment.grade.id;
        certificateUrl = appointment.grade.certificateUrl;
        feedbackUrl = appointment.grade.feedbackUrl;
        if (appointment.grade.gradeType) {
          grade = appointment.grade.gradeType.name;
        }
      }

      const {
        attendant: {
          id,
          firstName,
          lastName,
          businessName,
          hash,
          user: {
            email
          }
        }
      } = appointment;
      const fullName = `${firstName} ${lastName}`;

      const rowData = [
        `${serviceName}`,
        `${startDatetime.stringDate} ${startDatetime.formatTime} - ${finishDatetime.stringDate} ${finishDatetime.formatTime}`,
        `${fullName}`,
        `<a href="mailto:${email}">${email}</a>`,
        `${businessName}`,
        `${grade ? `<strong>${grade}</strong>` : '<span style="font-style: italic;color: #999999;"><%= translation.RSM_ATTENDANT_PROFILE.LABEL_3 %></span>'}<div id="gradeType-${appointmentId}"></div>`,
      ];

      if (type === 'exam') {
        rowData.push(`${certificateUrl ? `<a target="_blank" href="/grade/${certificateUrl}"><%= translation.RSM_ATTENDANT_PROFILE.CERTIFICATE %></a>` : '<span style="font-style: italic;color: #999999;"><%= translation.RSM_ATTENDANT_PROFILE.LABEL_4 %></span>'}<div id="meetingUrl-${appointmentId}"></div>`);
        rowData.push(`${(feedbackUrl ? `<a target="_blank" href="${feedbackUrl}"><%= translation.RSM_ATTENDANT_PROFILE.EVALUATION %></a>` : '<span style="font-style: italic;color: #999999;"><%= translation.RSM_ATTENDANT_PROFILE.LABEL_5 %></span>')}`);
      }

      rowData.push(`${trainerMail}`);

      gradesTable
        .row
        .add(rowData)
        .draw()
        .node();
    });
  }

  function displayErrors(errors) {
    const error = document.getElementById('error');
    const errorMessage = document.getElementById('error-message');

    if (errors.length === 0) {
      error.classList.add('d-none');
      errorMessage.innerText = '';
      return;
    }

    error.classList.remove('d-none');
    errorMessage.innerText = errors.join('\n');
  }

  function parseAttendant(attendant) {
    const firstName = document.getElementById('firstName');
    const lastName = document.getElementById('lastName');
    const businessName = document.getElementById('businessName');
    const email = document.getElementById('email');
    const country = document.getElementById('country');
    const rsmName = document.getElementById('rsmName');

    firstName.innerHTML = attendant.firstName;
    lastName.innerHTML = attendant.lastName;
    businessName.innerHTML = attendant.businessName;
    email.innerHTML = attendant.user.email;

    if (attendant.user.countryId) {
      country.innerHTML = attendant.user.country.name;
    }

    rsmName.value = attendant.rsmId;
  }

  function updateAttendant(e) {
    if (e) {
      e.preventDefault();
    }

    const rsmId = document.getElementById('rsmName').value;

    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    fetch('/api/v1/attendants/<%= attendantId %>', {
      headers: myHeaders,
      credentials: "same-origin",
      method: 'PATCH',
      body: JSON.stringify({
        rsmId
      })
    })
      .then(res => {
        if (res.status === 200) {
          alert('<%= translation.RSM_ATTENDANT_PROFILE.LABEL_6 %>');
        } else {
          alert('<%= translation.RSM_ATTENDANT_PROFILE.LABEL_7 %>');
        }
        window.location.href = "/attendant";
      })
      .catch(err => {
        console.error(err);
      });
  }
</script>

</html>